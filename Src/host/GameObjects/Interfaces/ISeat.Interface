// ======================================================
// Copyright (c) 2017-2024 the ReSDK_A3 project
// sdk.relicta.ru
// ======================================================

interfaceHeader

if !isNullVar(__iseat_node_init__) then {

	"
		name:Одноместное сиденье
		namelib:Одноместное сиденье (одноместная кровать)
		desc:Возвращает истину, если объект является одноместным сиденьем, стулом или кроватью.
		type:const
		return:bool:Одноместное сиденье
	"+__iseat_node_postfix node_met
	func(isSingleSeat) {params['this']; setLastError("'isSingleSeat' - not implemented for class " + callSelf(getClassName))};


	"
		name:Макс. номер сиденья
		desc:Возвращает максимальный номер (индекс) сиденья. Отсчет начинается с 0. Например, если проверяемый объект одноместное сиденье - возвращается ноль. Если двухместное - один, трехместное - два и т.д.
		type:const
		return:int:Максимальный номер сиденья
	" +__iseat_node_postfix node_met
	func(getSeatMaxIndex) {params['this']; setLastError("'getSeatMaxIndex' - not implemented for class " + callSelf(getClassName))};

	"
		name:Сиденье свободно
		desc:Возвращает истину, если сиденье по указанному номеру (индексу) никем не занято. Если указано число вне диапазона допустимых мест - вернет ЛОЖЬ.
		type:get
		lockoverride:1
		in:int:Номер:Номер сиденья для проверки. -1 означает что выполняется поиск наличия хотя бы одного свободного сиденья.
			opt:require=0:def=-1
		return:bool:Место свободно
	" +__iseat_node_postfix node_met
	func(isSeatIndexFree) {params['this']; setLastError("'isSeatIndexFree' - not implemented for class " + callSelf(getClassName))};

	"
		name:Владелец места сиденья
		desc:Возвращает сущность, которая заняла место на кровати или стуле. Если место свободно или не сущетсвует - возвращает null-ссылку.
		type:get
		lockoverride:1
		return:Mob:Сущность, занявшая место, либо null-ссылка, если место не занято.
	" +__iseat_node_postfix node_met
	func(getSeatOwner) {params['this']; setLastError("'getSeatOwner' - not implemented for class " + callSelf(getClassName))};

	"
		name:Ближайшее свободное сиденье
		desc:Возвращает номер (индекс) ближайшего незанятого сиденья от цели. Если ближайшего места не найдено - возвращает -1. Данная функция полезна, когда вам нужно выбрать ближайшее свободное место для посадки вашего персонажа.
		type:method
		lockoverride:1
		in:Mob:Проверяющий:Сущность от которой будет получено ближайшее место.
		return:Mob:Сущность, занявшая место, либо null-ссылка, если место не занято.
	" +__iseat_node_postfix node_met
	func(getNearFreeSeatIndex) {params['this']; setLastError("'getNearFreeSeatIndex' - not implemented for class " + callSelf(getClassName))};

	"
		name:Занять место
		desc:Производит попытку посадить сущность на сиденье по указанному номеру (индексу).
		type:method
		lockoverride:1
		in:Mob:Сущность:Сущность, которая пытается сесть на сиденье или кровать.
		in:int:Место:Номер сиденья (индекс), на который пытается сесть сущность.
			opt:require=0:def=-1
		return:bool:Была ли посажена сущность
	" +__iseat_node_postfix node_met
	func(seatConnect) {params['this']; setLastError("'seatConnect' - not implemented for class " + callSelf(getClassName))};

	"
		name:Освободить место
		desc:Производит попытку освободить место, занятого сущностью.
		type:method
		lockoverride:1
		in:int:Место:Номер сиденья (индекс), с которого должна встать сущность.
			opt:require=0:def=-1
		return:bool:Была ли сущность поднята с сиденья. Если место не было занято - возвращает ЛОЖЬ.
	" +__iseat_node_postfix node_met
	func(seatDisconnect) {params['this']; setLastError("'seatDisconnect' - not implemented for class " + callSelf(getClassName))};

} else {

//набор анимации в слоте
/*getter_func(getChairSitdownAnimation,["re_HubSittingChairA_move1" arg "re_HubSittingChairB_idle1" arg "re_HubSittingChairB_idle2" arg "re_HubSittingChairB_idle3" arg
"re_HubSittingChairUA_idle1" arg "re_HubSittingChairUA_idle2" arg "re_HubSittingChairUA_idle3" arg "re_HubSittingChairUA_move1" arg
"re_HubSittingChairUB_idle1" arg "re_HubSittingChairUB_idle2" arg "re_HubSittingChairUB_idle3" arg "re_HubSittingChairUB_move1" arg
"re_HubSittingChairUC_idle1" arg "re_HubSittingChairUC_idle2" arg "re_HubSittingChairUC_idle3"]);*/
getter_func(getChairSitdownAnimation,[ \
	"re_HubSittingChairA_idle1" arg "re_HubSittingChairA_idle2" arg "re_HubSittingChairA_idle3" arg \
	"re_HubSittingChairB_idle1" arg "re_HubSittingChairB_idle2" arg "re_HubSittingChairB_idle3" arg \
	"re_HubSittingChairC_idle1" arg "re_HubSittingChairC_idle2" arg "re_HubSittingChairC_idle3" arg \
	"re_HubSittingChairUA_idle1" arg "re_HubSittingChairUA_idle2" arg "re_HubSittingChairUA_idle3" arg \
	"re_HubSittingChairUB_idle1" arg "re_HubSittingChairUB_idle2" arg "re_HubSittingChairUB_idle3" arg \
	"re_HubSittingChairUC_idle1" arg "re_HubSittingChairUC_idle2" arg "re_HubSittingChairUC_idle3"]
);

//набор анимаций в бессознанке
/*
	arg "KIA_Truck_Cargo02" \
	arg "KIA_Truck_Cargo04" \
	arg "KIA_Truck_Cargo03" \
*/
getter_func(getChairUncAnimations, [ \
	"KIA_Passenger_Van_02_Medevac_Back" \
	arg "KIA_passenger_VAN_codriver01" \
	arg "KIA_passenger_VAN_codriver02" \
	arg "KIA_pilot_Heli_Transport_04" \
	arg "KIA_passenger_quadbike" \
	arg "KIA_passenger_MRAP_03exgunner" \
	arg "KIA_passenger_MRAP_01_back" \
	arg "KIA_passenger_mantisrear" \
	arg "KIA_Truck_Cargo01" \
]);

func(canUseSeatUncAnimations)
{
	objParams();
	!isTypeOf(this,BedBase)
};

//набор анимаций при вставании
//для мирной стоийки - amovpknlmstpsnonwnondnon_amovpercmstpsnonwnondnon
//для комбата - amovpknlmstpsraswpstdnon_amovpercmstpsraswpstdnon
getter_func(getChairStandupAnimation,"AmovPknlMstpSnonWnonDnon_AmovPercMstpSnonWnonDnon");
getter_func(getChairStandupCombatAnimation,"amovpknlmstpsraswpstdnon_amovpercmstpsraswpstdnon");

//константа для стула/кровати или любого объекта на который можно сесть
getterconst_func(isSeat,true); 

//одноместное ли сиденье
func(isSingleSeat)
{
	objParams();
	private _ofsPos = callSelf(getChairOffsetPos);
	count _ofsPos == 3 && {
		equalTypes(_ofsPos select 0,0)
		&& equalTypes(_ofsPos select 1,0)
		&& equalTypes(_ofsPos select 2,0)
	}
};

//массивы смещений трансформации для стула, многоместного сиденья или кровати
getter_func(seatListOffsetPos,ifcheck(callSelf(isSingleSeat), [callSelf(getChairOffsetPos)], callSelf(getChairOffsetPos)) );
func(seatListOffsetDir)
{
	objParams();
	private _ofsDir = callSelf(getChairOffsetDir);
	if equalTypes(_ofsDir,0) then {
		//conv to array
		callSelf(seatListOffsetPos) apply {_ofsDir}
	} else {
		_ofsDir
	}
};

//сюда вписываются мобы которые заняли данные места
var(seatListOwners,[nullPtr]);
//это ссылка на объекты-заглушки для репликации
var(_seatListDummy,[objNUll]);

getter_func(isMovable,(getSelf(seatListOwners) findif {!isNullReference(_x)})==-1 );

//название мест (нужно дописать логику)
getter_func(seatListName,["Сиденье"]);

func(constructor)
{
	objParams();
	private _count = count callSelf(seatListOffsetPos);
	private _l = getSelf(seatListOwners);
	_l resize _count;
	setSelf(seatListOwners,_l apply {nullPtr});
	setSelf(_seatListDummy,_l apply {objNUll});

	//validate getChairOffsetPos
	#ifdef EDITOR
	private _chofs = callSelf(getChairOffsetPos);
	if (count _chofs == 1 && {not_equalTypes(_chofs select 0,0)}) then {
		private _m = format["Ошибка при определении getChairOffsetPos для класса '%1'. Если ваше сиденье одноместное, то массив не должен быть вложен;%4%4    Получено: %2%4    Ожидается: %3",
		callSelf(getClassName),
		_chofs,
		_chofs select 0,
		endl
		];
		setLastError(_m);
	};
	#endif
};

func(destructor)
{
	objParams();

	for "_i" from 0 to callSelf(getSeatMaxIndex) do {
		callSelfParams(seatDisconnect,_i);
	};
};

func(getSeatMaxIndex)
{
	objParams();
	(count getSelf(seatListOwners)) - 1
};

//свободно ли место (unsafe function)
func(isSeatFree)
{
	objParams_1(_index);
	isNullReference(getSelf(seatListOwners) select _index)
};

//public function with indexoutofrange check

func(isSeatIndexFree)
{
	objParams_1(_index);
	if (isNullVar(_index) || {_index == -1}) then {
		_index = getSelf(seatListOwners) find nullPtr;
	};
	if !inRange(_index,0,(count getSelf(seatListOwners)) - 1) exitwith {false};
	callSelfParams(isSeatFree,_index);
};

func(canSeat)
{
	objParams_2(_usr,_index);
	if !inRange(_index,0,(count getSelf(seatListOwners)) - 1) exitwith {false};
	callSelfParams(isSeatFree,_index);
};

// Получить владельца конкретного сиденья. Если сиденье только 1 - передайте аргументом 0 или null

func(getSeatOwner)
{
	objParams_1(_idx);

	if isNullVar(_idx) then {_idx = 0};

	private _listSeats = getSelf(seatListOwners);
	if !inRange(_idx,0,(count _listSeats) - 1) exitwith {nullPtr};

	_listSeats select _idx;
};

func(getNearFreeSeatIndex)
{
	objParams_1(_usr);
	if !callSelf(isInWorld) exitwith {-1};
	private _nearPos = 9999;
	private _retIndex = -1;
	private _startPos = callFunc(_usr,getLastInteractEndPos);
	private _endPos = null;
	private _wObj = getSelf(loc);
	
	{
		if !callSelfParams(isSeatFree,_foreachIndex) then {continue};

		_endPos = _wObj modelToWorld _x;
		if (_startPos distance _endPos < _nearPos) then {
			_nearPos = _startPos distance _endPos;
			_retIndex = _foreachIndex;
		};
	} foreach callSelf(seatListOffsetPos);

	_retIndex
};

//стандартная процедура присоединения
func(seatConnect)
{
	objParams_2(_usr,_optIdx);
	
	private _index = ifcheck(isNullVar(_optIdx),callSelfParams(getNearFreeSeatIndex,_usr),_optIdx);

	//Не нашлось подходящего места
	if (_index == -1) exitwith {false};

	//место уже занято
	if !callSelfParams(canSeat,_usr arg _index) exitWith {false};
	if callFunc(_usr,isConnected) exitWith {false};

	if callFunc(_usr,isGrabbed) then {
		callFunc(getVar(_usr,grabber),stopAllGrab);
	};
	if !isNullReference(callSelf(getPullMainOwner)) exitWith {
		callFuncParams(_usr,localSay,"Нужно отпустить " + callSelf(getName) arg "error");
		false
	};

	//!0.7.645 temp replace
	//callSelfParams(seatApplySeatAnim,_usr);
	
	private _origObj = getSelf(loc);

	private _pby = ([_origObj] call model_getpitchbankyaw) apply {abs _x};
	if (_pby select 0 >= 12 || _pby select 1 >= 12) exitWith {
		callFuncParams(_usr,localSay,"Слишком большой наклон" arg "error");
		false
	};

	private _offsetPos = callSelf(seatListOffsetPos) select _index;
	private _offsetDir = callSelf(seatListOffsetDir) select _index;
	
	private _uncSeatOffsetZ = 0.48;

	traceformat("sitting data %1 %2",_offsetPos arg _offsetDir)
	
	//Создаём репликатор
	private _rplObj = "C_Quadbike_01_F" createVehicle [0,0,0];
	
	if isTypeOf(this,BedBase) then {
		_rplObj setvariable ["sitmode","bed",true];
		_uncSeatOffsetZ = 0;
	};

	_rplObj allowDamage false; 
	#ifndef EDITOR
	_rplObj hideObjectGlobal true;
	#else
	_rplObj hideObjectGlobal true;
	#endif
	getSelf(_seatListDummy) set [_index,_rplObj];
	private _pos = _origObj modelToWorld (_offsetPos vectorAdd [0,0,-1.62629]);
	_rplObj setPosAtl _pos;
	_rplObj setDir (getDir _origObj + _offsetDir);
	private _pfh_onReplicate = {
		(_this select 0) params ["_o"];
		if isNullReference(_o) exitWith {stopThisUpdate()};
		_o setPosAtl (_o getvariable "__posSeat");
	}; startUpdateParams(_pfh_onReplicate,0,[_rplObj]);

	_rplObj setVariable ["__posSeat",_pos]; //current mode
	_rplObj setVariable ["__posSeatActive",_pos];
	_rplObj setVariable ["__posSeatUnc",_pos vectorAdd [0,0,_uncSeatOffsetZ]];
	
	
	private _usrPos = callFunc(_usr,getPos);
	private _usrDir = callFunc(_usr,getDir);

	if !isNullVar(__GLOBAL_INITIALIZER_POS__) then {
		_usrPos = __GLOBAL_INITIALIZER_POS__ select 0;
		_usrDir = __GLOBAL_INITIALIZER_POS__ select 1;
	};

	private _dir = _origObj getRelDir getVar(_usr,owner);
	private _restDir = if (_dir > 315 || _dir <= 45) then {
		_usrDir+_dir //он спереди
	} else {_usrDir+180};
	//TODO починить посадку спереди объекта
	_restDir = _usrDir + 180;
	
	_rplObj setVariable ["_restDir",_restDir];
	_rplObj setVariable ["_restPos",_usrPos];	

	getSelf(seatListOwners) set [_index,_usr];
	setVar(_usr,connectedTo,this);
	
	private _factDir = getdir _origObj + _offsetDir;
	private _mobUsr = getVar(_usr,owner);
	//sync new location
	_rplObj setvariable ["__replicatedInfo",[_mobUsr,_factDir,_rplObj]];
	[_mobUsr,"seatConnect",[_mobUsr,_factDir,_rplObj]] call repl_doLocal;
	
	//apply anim after connect to seat
	callSelfParams(seatApplySeatAnim,_usr arg true);

	callSelfParams(onSeat,_usr arg _index);
};

//событие вызываемое после успешной посадки
func(onSeat)
{
	objParams_2(_usr,_index);
};

//событие вызываемое после успешного вставания
func(onStand)
{
	objParams_2(_usr,_index);
	if isdeleted(this) then {
		callFunc(_usr,KnockDown);
	};
};

func(seatApplySeatAnim)
{
	objParams_2(_usr,_doSyncPos);
	if isNullVar(_doSyncPos) then {_doSyncPos = false};

	private _chSeatList = callSelf(getChairSitdownAnimation);
	private _chSeatUncList = ifcheck(callSelf(canUseSeatUncAnimations),callSelf(getChairUncAnimations),_chSeatList);
	private _anim = ifcheck(callFunc(_usr,isActive),callSelf(getChairSitdownAnimation),_chSeatUncList);
	if equalTypes(_anim,[]) then {_anim = pick _anim};

	//sync pos
	if (_doSyncPos) then {
		private _uInd = (getSelf(seatListOwners) find _usr);
		if (_uInd==-1) exitWith {};

		private _vName = if ((tolower _anim) in (callSelf(getChairUncAnimations) apply {tolower _x})) 
			then {"__posSeatUnc"} else {"__posSeatActive"};
		private _rplObj = getSelf(_seatListDummy) select _uInd;
		if isNullReference(_rplObj) exitWith {};

		_rplObj setVariable ["__posSeat",_rplObj getvariable _vName];

		private _rinf = (_rplObj getVariable "__replicatedInfo");
		[_rinf select 0,"seatConnectUpdate",_rinf] call repl_doLocal;
	};

	callFuncParams(_usr,applyGlobalAnim,"switchmove" arg _anim);
	
	//fix sync bodyparts on seat dead anims
	callFunc(_usr,syncBodyParts);
	
};

func(seatDisconnect)
{
	objParams_1(_usrOrIndex);
	if equalTypes(_usrOrIndex,nullPtr) then {
		_usrOrIndex = getSelf(seatListOwners) find _usrOrIndex;
	};
	if (_usrOrIndex == -1) exitWith {false};
	
	private _usr = getSelf(seatListOwners) select _usrOrIndex;
	if isNullReference(_usr) exitWith {false};

	private _rplObj = getSelf(_seatListDummy) select _usrOrIndex;
	private _restPos = _rplObj getVariable "_restPos";
	private _restDir = _rplObj getVariable "_restDir";
	
	detach getVar(_usr,owner); //disconnect
	setVar(_usr,connectedTo,nullPtr);
	deleteVehicle _rplObj;
	getSelf(seatListOwners) set [_usrOrIndex,nullPtr];
	
	private _method = "getChairStandup";
	if getVar(_usr,isCombatModeEnable) then {
		modvar(_method) + "Combat";
	};
	modvar(_method) + "Animation";
	private _anim = callSelfReflect(_method);
	if equalTypes(_anim,[]) then {_anim = pick _anim};
	
	callFuncParams(_usr,setPosServer,_restPos);
	callFuncParams(_usr,setDir,_restDir);
	
	if (callFunc(_usr,isUnconscious) || callFunc(_usr,isSleep)) then {
		callFuncParams(_usr,setUnconsciousAnim,true);
	} else {
		callFuncParams(_usr,applyGlobalAnim,"switchmove" arg _anim);
	};
	
	callSelfParams(onStand,_usr arg _usrOrIndex);

	true
};

getter_func(canUseMainAction,isTypeOf(_usr,Mob));
getter_func(getMainActionName,"Сесть");
func(onMainAction) {
	objParams_1(_usr);
	
	callSelfParams(seatConnect,_usr);
};

func(onClick)
{
	objParams_1(_usr);
	if callFunc(_usr,isGrabbedInActiveHand) exitWith {
		private _m = callFunc(_usr,getGrabbedInActiveHand);
		if isNullReference(_m) exitWith {};
		private _idx = callSelfParams(getNearFreeSeatIndex,_usr);
		callSelfParams(seatConnect,_m arg _idx);
	};
	super();
};

func(getSeatRestPos)
{
	objParams_1(_usr);
	
	if equalTypes(_usr,nullPtr) then {
		_usr = getSelf(seatListOwners) find _usr;
	};
	if (_usr == -1) exitWith {null};
	
	private _rplObj = getSelf(_seatListDummy) select _usr;
	private _restPos = _rplObj getVariable "_restPos";
	_restPos
};


}; //end __iseat_node_init__